<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>助けて</title>
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css" rel="stylesheet">
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
        crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/stylesheets/home.css">
    <script src="https://cdn.jsdelivr.net/npm/bs-custom-file-input/dist/bs-custom-file-input.js"></script>
</head>
<%- include('navbar.ejs') %>

    <body>
        <script src="../scripts/bootstrapFormValidation.js"></script>
        <div class="row">
            <div class="container form-container col-"
                style="box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;">
                <h1 class="text-center card-title" style="margin-bottom: 5vh; margin-top: 3vh;">Make Your own Request
                </h1>
                <div class="col-10 offset-1">
                    <form class="needs-validation" action="/new" method="POST" enctype="multipart/form-data"
                        id="mainForm">
                        <div class="mb-3 form-floating">
                            <input class="form-control" type="text" id="title" name="complaint[title]" required>
                            <label class="form-label" for="title">Title</label>
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="location">Click on map to select location</label>
                            <div class=" new-map-container">
                                <div id="map"
                                    style="width: 100%; height: 85vh; border-radius: 2%; box-shadow: rgba(17, 12, 46, 0.15) 0px 48px 100px 0px;">
                                </div>
                                <script>
                                    const mapboxToken = "<%= mapboxToken %>"
                                </script>
                                <script src="../scripts/mapboxConfig.js"></script>
                            </div>
                            <input type="hidden" name="complaint[longitude]" id="longitude" required
                                value="<%= Math.random() * 180 - 90%>">
                            <input type="hidden" name="complaint[latitude]" id="latitude" required
                                value="<%= Math.random() * 360 - 180%>">
                        </div>
                        <div class="mb-3">
                            <label for="startDate">Approximately when this happened / started</label>
                            <input id="startDate" class="form-control" type="date" name="complaint[date]" / required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="description">Description</label>
                            <textarea class="form-control" type="text" id="description" name="complaint[description]"
                                required></textarea>
                        </div>
                        <!-- <div class="mb-3 custom-file">
                            <label for="image" class="form-label">Upload images</label>
                            <input class="form-control" type="file" id="image" multiple name='image'>
                        </div> -->
                        <!-- <div class="camera">
                            <video id="video">Video stream not available.</video>
                            <button id="startbutton" type="button">Take photo</button>
                        </div>
                        <canvas id="canvas"></canvas>
                        <input type="hidden" id="photo" name="photo"> -->
                        <div class="camera">
                            <video id="video">Video stream not available.</video>
                            <button id="startbutton">Take photo</button>
                        </div>
                        <canvas id="canvas"> </canvas>
                        <input id="myFileInput" type="file" accept="image/*;capture=camera" name="theImage">
                        <div class="mb-3">
                            <button id="formSubmitButton" class="btn btn-success" type="button">Submit Request |
                                お願い</button>
                        </div>
                    </form>
                    <script>
                        let dataUrl;
                        // The width and height of the captured photo. We will set the
                        // width to the value defined here, but the height will be
                        // calculated based on the aspect ratio of the input stream.

                        const width = 640; // We will scale the photo width to this
                        let height = 0; // This will be computed based on the input stream

                        // |streaming| indicates whether or not we're currently streaming
                        // video from the camera. Obviously, we start at false.

                        let streaming = false;

                        // The various HTML elements we need to configure or control. These
                        // will be set by the startup() function.

                        let video = null;
                        let canvas = null;
                        let photo = null;
                        let startbutton = null;

                        function showViewLiveResultButton() {
                            if (window.self !== window.top) {
                                // Ensure that if our document is in a frame, we get the user
                                // to first open it in its own tab or window. Otherwise, it
                                // won't be able to request permission for camera access.
                                document.querySelector(".contentarea").remove();
                                const button = document.createElement("button");
                                button.textContent = "View live result of the example code above";
                                document.body.append(button);
                                button.addEventListener("click", () => window.open(location.href));
                                return true;
                            }
                            return false;
                        }

                        function startup() {
                            if (showViewLiveResultButton()) {
                                return;
                            }
                            video = document.getElementById("video");
                            canvas = document.getElementById("canvas");
                            startbutton = document.getElementById("startbutton");

                            navigator.mediaDevices
                                .getUserMedia({ video: true, audio: false })
                                .then((stream) => {
                                    video.srcObject = stream;
                                    video.play();
                                })
                                .catch((err) => {
                                    console.error(`An error occurred: ${err}`);
                                });

                            video.addEventListener(
                                "canplay",
                                (ev) => {
                                    if (!streaming) {
                                        height = video.videoHeight / (video.videoWidth / width);

                                        // Firefox currently has a bug where the height can't be read from
                                        // the video, so we will make assumptions if this happens.

                                        if (isNaN(height)) {
                                            height = width / (4 / 3);
                                        }

                                        video.setAttribute("width", width);
                                        video.setAttribute("height", height);
                                        canvas.setAttribute("width", width);
                                        canvas.setAttribute("height", height);
                                        streaming = true;
                                    }
                                },
                                false,
                            );

                            startbutton.addEventListener(
                                "click",
                                (ev) => {
                                    takepicture();
                                    ev.preventDefault();
                                },
                                false,
                            );

                            clearphoto();
                        }

                        // Fill the photo with an indication that none has been
                        // captured.

                        function clearphoto() {
                            const context = canvas.getContext("2d");
                            context.fillStyle = "#AAA";
                            context.fillRect(0, 0, canvas.width, canvas.height);

                            const data = canvas.toDataURL("image/png");
                        }

                        // Capture a photo by fetching the current contents of the video
                        // and drawing it into a canvas, then converting that to a PNG
                        // format data URL. By drawing it on an offscreen canvas and then
                        // drawing that to the screen, we can change its size and/or apply
                        // other changes before drawing it.

                        function takepicture() {
                            const context = canvas.getContext("2d");
                            if (width && height) {
                                canvas.width = width;
                                canvas.height = height;
                                context.drawImage(video, 0, 0, width, height);

                            } else {
                                clearphoto();
                            }
                            
                        }

                        // Set up our event listener to run the startup process
                        // once loading is complete.
                        window.addEventListener("load", startup, false);
                        const formButton = document.getElementById("formSubmitButton");
                        formButton.addEventListener("click", (event) => {
                            event.preventDefault();
                            function dataURItoBlob(dataURI) {
                                // convert base64/URLEncoded data component to raw binary data held in a string
                                var byteString;
                                if (dataURI.split(',')[0].indexOf('base64') >= 0)
                                    byteString = atob(dataURI.split(',')[1]);
                                else
                                    byteString = unescape(dataURI.split(',')[1]);

                                // separate out the mime component
                                var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

                                // write the bytes of the string to a typed array
                                var ia = new Uint8Array(byteString.length);
                                for (var i = 0; i < byteString.length; i++) {
                                    ia[i] = byteString.charCodeAt(i);
                                }

                                return new Blob([ia], { type: mimeString });
                            }
                            canvas = document.getElementById("canvas")
                            dataUrl = canvas.toDataURL('image/jpeg')
                            var blob = dataURItoBlob(dataUrl);
                            var fd = new FormData(document.forms[0]);
                            fd.append("canvasImage", blob);

                            fetch('/new', {
                                method: 'POST',
                                body: fd
                            }).then(response => {
                                console.log(response)
                            })
                            window.location="/"
                        });
                    </script>
                </div>
            </div>
        </div>
        <!-- <script>
            let width = 320;  // We will scale the photo width to this
            let height = 0;   // This will be computed based on the input stream

            let streaming = false;

            let video = null;
            let canvas = null;
            let photo = null;
            let startbutton = null;

            function startup() {
                video = document.getElementById('video');
                canvas = document.getElementById('canvas');
                photo = document.getElementById('photo');
                startbutton = document.getElementById('startbutton');

                navigator.mediaDevices.getUserMedia({ video: true, audio: false })
                    .then(function (stream) {
                        video.srcObject = stream;
                        video.play();
                    })
                    .catch(function (err) {
                        console.log("An error occurred: " + err);
                    });

                video.addEventListener('canplay', function (ev) {
                    if (!streaming) {
                        height = video.videoHeight / (video.videoWidth / width);
                        video.setAttribute('width', width);
                        video.setAttribute('height', height);
                        canvas.setAttribute('width', width);
                        canvas.setAttribute('height', height);
                        streaming = true;
                    }
                }, false);

                startbutton.addEventListener('click', function (ev) {
                    takepicture();
                    ev.preventDefault();
                }, false);

                clearphoto();
            }

            function clearphoto() {
                const context = canvas.getContext('2d');
                context.fillStyle = "#AAA";
                context.fillRect(0, 0, canvas.width, canvas.height);

                const data = canvas.toDataURL('image/png');
                photo.setAttribute('src', data);
            }
            let file;
            function takepicture() {
                const context = canvas.getContext('2d');
                if (width && height) {
                    canvas.width = width;
                    canvas.height = height;
                    context.drawImage(video, 0, 0, width, height);

                    const data = canvas.toDataURL('image/png');
                    photo.setAttribute('src', data);

                    // Convert data URL to blob

                    function dataURLtoBlob(dataurl) {
                        var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],
                            bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
                        while (n--) {
                            u8arr[n] = bstr.charCodeAt(n);
                        }
                        return new Blob([u8arr], { type: mime });
                    }

                    var blob = dataURLtoBlob(data);

                    // Create a file from the blob
                    file = new File([blob], "filename.png");
                } else {
                    clearphoto();
                }
            }

            window.addEventListener('load', startup, false);
            // Get a reference to your form
            var form = document.getElementById('mainForm');
            let formSubmit = document.getElementById('formSubmitButton')
            // Prevent the form's default submit action
            formSubmit.addEventListener('submit', function (event) {
                event.preventDefault();

                // Create a new FormData instance
                var formData = new FormData();



                // Append the captured image file to the FormData instance
                formData.append('complaint[image]', file);

                // Append other form data to the FormData instance
                for (var i = 0; i < form.elements.length; i++) {
                    var element = form.elements[i];
                    if (element.name && element.value && element.type !== 'file') {
                        formData.append(element.name, element.value);
                    }
                }

                console.log(formData)

                // Send formData to the server using an AJAX request
                fetch('/new', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => console.log(data))
                    .catch(error => console.error('Error:', error));

            });


        </script> -->

        <script>

        </script>
        <script>
            map.getCanvas().style.cursor = 'pointer';
            var marker;

            map.on('click', function (e) {
                if (marker) {
                    marker.remove();
                }

                marker = new mapboxgl.Marker()
                    .setLngLat(e.lngLat)
                    .addTo(map);

                document.getElementById('longitude').value = e.lngLat.lng;
                document.getElementById('latitude').value = e.lngLat.lat;
            });
        </script>
    </body>


    <style>
        label.cameraButton {
            display: inline-block;
            margin: 1em 0;

            /* Styles to make it look like a button */
            padding: 0.5em;
            border: 2px solid #666;
            border-color: #EEE #CCC #CCC #EEE;
            background-color: #DDD;
        }

        /* Look like a clicked/depressed button */
        label.cameraButton:active {
            border-color: #CCC #EEE #EEE #CCC;
        }

        /* This is the part that actually hides the 'Choose file' text box for camera inputs */
        label.cameraButton input[accept*="camera"] {
            display: none;
        }
    </style>

</html>